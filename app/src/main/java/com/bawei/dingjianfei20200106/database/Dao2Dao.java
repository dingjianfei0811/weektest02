package com.bawei.dingjianfei20200106.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bawei.dingjianfei20200106.model.dao.Dao2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAO2".
*/
public class Dao2Dao extends AbstractDao<Dao2, Void> {

    public static final String TABLENAME = "DAO2";

    /**
     * Properties of entity Dao2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property B = new Property(0, String.class, "b", false, "B");
    }


    public Dao2Dao(DaoConfig config) {
        super(config);
    }
    
    public Dao2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAO2\" (" + //
                "\"B\" TEXT);"); // 0: b
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAO2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dao2 entity) {
        stmt.clearBindings();
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(1, b);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dao2 entity) {
        stmt.clearBindings();
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(1, b);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Dao2 readEntity(Cursor cursor, int offset) {
        Dao2 entity = new Dao2( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // b
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dao2 entity, int offset) {
        entity.setB(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Dao2 entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Dao2 entity) {
        return null;
    }

    @Override
    public boolean hasKey(Dao2 entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
